# =================================================================
# 1. ConfigMap: To automatically provision the Prometheus data source
# =================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  prometheus.yaml: |-
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      # URL for the Prometheus service within the Kubernetes cluster
      url: http://prometheus-service.monitoring.svc.cluster.local:9090
      access: proxy
      isDefault: true

---
# =================================================================
# 2. Deployment: Defines how to run the Grafana pod
# =================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.2 # Using a specific stable version
        ports:
        - containerPort: 3000

        # --- Best Practice: Resource Management ---
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"

        # --- Mount the ConfigMap for data source provisioning ---
        volumeMounts:
        - name: grafana-datasources-volume
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
      volumes:
      - name: grafana-datasources-volume
        configMap:
          name: grafana-datasources

---
# =================================================================
# 3. Service: Exposes the Grafana UI
# =================================================================
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
spec:
  selector:
    app: grafana
  type: NodePort # Ideal for accessing the UI in Minikube
  ports:
  - protocol: TCP
    port: 3000       # Internal port within the cluster
    targetPort: 3000 # Port on the Grafana container
    nodePort: 32000    # External port to access from your browser